---
title: "DATA205 - EDA"
format: html
editor: visual
---

```{r}
# Loading in libraries

library(tidyverse)
library(plotly)
library(dplyr)
library(knitr)
library(ggplot2)
library(forecast)
library(lubridate)
library(DT)
library(gt)
library(shiny)
library(rsconnect)
```

```{r}
# Importing my dataset

data <- read_csv("crimes.csv")
```

```{r}
# Taking a quick look at the dataset

head(data)
```

```{r}
# Checking how many NAs are present in each column

na_columns <- colSums(is.na(data))
na_columns[na_columns > 0]
```

```{r}
# Changing column names to better reflect the data within the columns

names(data)[names(data) == "Crime Name1"] <- "Category"

names(data)[names(data) == "Crime Name2"] <- "Crime"

names(data)[names(data) == "Crime Name3"] <- "Description"
```

```{r}
# Extracting the values from the 'All Other Offenses' category and putting them into the 'Crime' column

clean_data <- data %>%
  mutate(
    Crime = if_else(Crime == "All Other Offenses", Description, Crime)
  )
```

# Begin - Most Reported Crime

```{r}
# Count and sort crimes by number of reports (in descending order)

most_reported_crime <- clean_data |>
  group_by(Crime) |>
  summarise(Report_Count = n(), .groups = "drop") |>
  arrange(desc(Report_Count))
```

```{r}
# Getting the top 5 reported crimes

top5_crimes <- most_reported_crime |>
  slice_max(Report_Count, n = 5)
```

```{r}
# Creating the visualization for top 5 reported crimes

ggplot(top5_crimes, aes(x = reorder(Crime, Report_Count), y = Report_Count)) +
  geom_bar(stat = "identity", fill = "darkgreen") +
  labs(title = "Top 5 Most Reported Crimes",
       x = "Crime",
       y = "Number of Reports") +
  coord_flip() +
  theme_bw()
```

```{r}
# Getting the top 5 reported crimes and sorting them by agency

top5_crimes_with_cat <- clean_data |>
  filter(Crime %in% top5_crimes$Crime) |>
  select(Crime, Category) |>
  distinct() |>
  right_join(top5_crimes, by = "Crime")
```

```{r}
# Creating the visualization

ggplot(top5_crimes_with_cat, aes(x = reorder(Crime, Report_Count), y = Report_Count, fill = Category)) +
  geom_bar(stat = "identity") +
  labs(title = "Top 5 Most Reported Crimes By Crime Category",
       x = "Crime",
       y = "Number of Reports",
       fill = "Category") +
  coord_flip() +
  theme_bw()
```

# End - Most Reported Crime

# Begin - Agency and Year Comparison

```{r}
# Observing values within the 'Agency' column

unique(clean_data$Agency)
```

```{r}
# Convert the values to standard date-time format

clean_data$Start_Date_Time <- mdy_hms(clean_data$Start_Date_Time)

# Creating a new column for the year the crime was reported
clean_data$Year <- as.numeric(format(clean_data$Start_Date_Time, "%Y"))

```

```{r}
# Aggregating data - year & agency

crime_summary <- clean_data |>
  group_by(Year, Agency) |>
  summarise(Crime_Count = n(), .groups = 'drop')

```

```{r}
# Making sure year values appear as whole numbers instead of decimals

crime_summary$Year <- as.factor(crime_summary$Year)
```

```{r}
# Removing NAs

crime_summary <- crime_summary[!is.na(crime_summary$Year), ]
```

```{r}
# Creating a bar plot of reported crimes by agency per year

crime_summary |>
  filter(!Agency %in% c("OTHR", "P"), !Year %in% c("2016", "2025")) |>
  ggplot() +
  geom_bar(aes(x = Year, y = Crime_Count / 1000, fill = Agency),
           position = "dodge", stat = "identity") +
  labs(fill = "Agency",
       y = "Crimes (in Thousands)",
       title = "Number of Reported Crimes by Agency per Year") +
  theme_bw()

```

```{r}
# Creating a bar plot of reported crimes per year by agency WITHOUT MCPD

crime_summary |>
  filter(!Agency %in% c("MCPD", "OTHR", "P")) |>
  complete(Year, Agency, fill = list(Crime_Count = 0)) |>
  ggplot() +
  geom_bar(aes(x = Year, y = Crime_Count / 1000, fill = Agency),
           position = "dodge", stat = "identity") +
  labs(fill = "Agency",
       y = "Crimes (in Thousands)",
       title = "Number of Reported Crimes by Agency Per Year (Excluding MCPD)") +
  theme_bw()
```

# End - Agency and Year Comparison

# Begin - Yearly Crime Report Average

```{r}
# Overall average number of reported crimes per year (excluding 2016 & 2025 since there isn't a full year of data for both)

average_crime_year <- clean_data |>
  filter(!Year %in% c(2016, 2025)) |>
  group_by(Year) |>
  summarise(Reports = n(), .groups = "drop") |>
  summarise(Avg_Crimes_Per_Year = mean(Reports))

# Getting the numerical value of the average

avg_crimes <- average_crime_year$Avg_Crimes_Per_Year


```

```{r}
# Linear regression model for overall average number of reported crimes per year

yearly_crime <- clean_data |>
  group_by(Year) |>
  summarise(Reports = n(), .groups = "drop")

model1 <- lm(Reports ~ Year, data = yearly_crime)
summary(model1)
```

```{r}
# Visualizing the model

ggplot(yearly_crime, aes(x = Year, y = Reports)) +
  geom_point(color = "blue", size = 3) +
  geom_smooth(method = "lm", se = TRUE, color = "red") +
  labs(title = "Trend in Reported Crimes Over Time",
       x = "Year",
       y = "Number of Reports") +
  theme_minimal()
```

```{r}
# Average number of reported crimes per year by crime category

average_category_year <- clean_data |>
  group_by(Year, Category) |>
  summarise(Reports = n(), .groups = "drop") |>
  group_by(Category) |>
  summarise(Avg_Crimes_Per_Year = mean(Reports))
average_category_year
```

# End - Yearly Crime Report Average

# Begin - Crime Reports by Year

```{r}
# Focusing on just the year the crimes were reported (excluding 2016 and 2025 since there isn't a full year of data for both)

reports_per_year <- clean_data |>
  filter(!Year %in% c(2016, 2025)) |>
  group_by(Year) |>
  summarise(Crime_Count = n(), .groups = "drop")
```

```{r}
# Bar plot of the number of reported crime per year (including the average)

ggplot(reports_per_year, aes(x = factor(Year), y = Crime_Count)) +
  geom_hline(yintercept = avg_crimes, color = "darkgreen", linetype = "dashed", size = 1) +
  annotate("text", x = Inf, y = avg_crimes,
           label = paste("Avg:", avg_crimes),vjust = -0.5, hjust = 1.1, color = "darkgreen") + # This is where I add in the average line
  geom_bar(stat = "identity", fill = "darkred") +
  labs(title = "Number of Reported Crimes Per Year",
       x = "Year",
       y = "Number of Reports") +
  theme_bw()
```

# End - Crime Reports by Year

# Begin - Category and Agency Comparison

```{r}
# Observing values within the 'Category' column

unique(clean_data$Category)
```

```{r}
# Aggregating data - agency & category

crime_by_agency_category <- clean_data |>
  group_by(Agency, Category) |>
  summarise(Crime_Count = n(), .groups = 'drop')
```

```{r}
# Creating the visualization for reported crimes by crime category

crime_by_agency_category |>
  ggplot(aes(x = Agency, y = Crime_Count/1000, fill = Category)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(fill = "Category of Crime",
       x = "Agency",
       y = "Crimes (in Thousands)",
       title = "Reported Crimes by Crime Category at Each Agency",
       caption = "Source: Montgomery County Police Department (via DataMontgomery)")

```

# End - Category and Agency Comparison

# Begin - Number of Reported Crimes by Category

```{r}
# Counting and ranking crime categories by total reports

crime_category_ranking <- clean_data |>
  group_by(Category) |>
  summarise(Crime_Count = n(), .groups = "drop") |>
  arrange(desc(Crime_Count))
```

```{r}
# Creating the visualization

crime_category_ranking |>
  slice_max(Crime_Count, n = 10) |>
  ggplot(aes(x = reorder(Category, Crime_Count), y = Crime_Count)) +
  geom_segment(aes(xend = Category, y = 0, yend = Crime_Count), color = "black") +
  geom_point(color = "red", size = 4) +
  coord_flip() +
  labs(
    title = "Number of Reported Crime by Crime Category",
    x = "Crime Category", y = "Number of Reports",
  )
```

# End - Number of Reported Crimes by Category

# Begin - Number of Unique Crimes Within the Crime Categories

```{r}
# Grouping by category

unique_crimes_per_category <- clean_data |>
  group_by(Category) |>
  summarise(Num_Unique_Crimes = n_distinct(Crime), .groups = "drop")
```

```{r}
# Creating the visualization for the number of unique crimes within each crime category

ggplot(unique_crimes_per_category, aes(x = reorder(Category, Num_Unique_Crimes), y = Num_Unique_Crimes)) +
  geom_bar(stat = "identity", fill = "pink") +
  coord_flip() +
  labs(
    title = "Number of Unique Crimes per Crime Category",
    x = "Crime Category",
    y = "Number of Unique Crimes"
  )
```

# End - Number of Unique Crimes Within the Crime Categories

# Begin - Unique crimes Within Each Crime Category

```{r}
# List unique crime names for each category

crime_names_by_category <- clean_data |>
  group_by(Category) |>
  summarise(Unique_Crimes = list(unique(Crime)), .groups = "drop")
```

```{r}
# 'Crime Against Not a Crime' values

crime_names_by_category$Unique_Crimes[[1]]
```

```{r}
# 'Crime Against Person' values

crime_names_by_category$Unique_Crimes[[2]]
```

```{r}
# 'Crime Against Property' values

crime_names_by_category$Unique_Crimes[[3]]
```

```{r}
# 'Crime Against Society' values

crime_names_by_category$Unique_Crimes[[4]]
```

# End - Unique crimes Within Each Crime Category

# Begin - Number of Reported Runaways Over the Years

```{r}
# Counting the number of runaway reports per year

runaways_by_year <- clean_data |>
  filter(Crime == "Runaway") |>
  group_by(Year) |>
  summarise(Runaway_Count = n(), .groups = "drop")
```

```{r}
# Making sure year values appear as whole numbers instead of decimals

runaways_by_year$Year <- as.factor(runaways_by_year$Year)
```

```{r}
# Creating the visualization

ggplot(runaways_by_year, aes(x = Year, y = Runaway_Count)) +
  geom_bar(stat = "identity", fill = 'purple') +
  labs(
    title = "Number of Reported Runaways per Year",
    x = "Year",
    y = "Number of Runaway Reports",
    fill = "Crime Category",
    caption = "Source: Montgomery County Police Department (via DataMontgomery)"
  )
```

# End - Number of Reported Runaways Over the Years

# Begin - Which Place Has the Highest Amount of Reported Crimes?

```{r}
# Checking the variables within the 'Place' column

unique(clean_data$Place)
```

```{r}
# Top five places where reported crimes occurred

top_places <- clean_data |>
  count(Place, sort = TRUE) |>
  slice_head(n = 5)
```

```{r}
# Creating the visualization
ggplot(top_places, aes(x = reorder(Place, n), y = n)) +
  geom_col(fill = "yellow") +
  coord_flip() +
  labs(
    title = "Top 5 Places with the Most Crime Reports",
    x = "Place",
    y = "Number of Reported Crimes"
  ) +
  theme_bw()
```

# End - Which Place Has the Highest Amount of Reported Crimes?

# Begin - Which Place Has the Highest Amount of Reported Crimes Based on Agency?

```{r}
# Reported crime at each location by agency

clean_data |>
  count(Place, Agency, sort = TRUE)
```

```{r}
# Filtering by 'Residence - Single Family' as an example
clean_data |>
  filter(Place == "Residence - Single Family") |>
  count(Agency, sort = TRUE)

```

```{r}
# Finding top 5 places with the most reports, then counting reports by Place and Agency within those places

top_places_agency <- clean_data |>
  count(Place, sort = TRUE) |>
  slice_head(n = 5) |>
  pull(Place)

clean_data |>
  filter(Place %in% top_places_agency) |>
  count(Place, Agency, sort = TRUE)

```

# End - Which Place Has the Highest Amount of Reported Crimes Based on Agency?

# Begin - Are There Any Patterns of Repeat Crimes in Specific Areas, and How Do They Correlate With Certain Crime Categories?

```{r}
# Repeat crimes based on place

crime_patterns <- clean_data |>
  group_by(Place, Crime) |>
  summarise(Count = n(), .groups = "drop") |>
  arrange(desc(Count))
```

```{r}
# Top five

crime_patterns |>
  filter(Count > 1000)
```

```{r}
repeat_places <- clean_data |>
  count(Place, sort = TRUE) |>
  filter(n > 20)
```

```{r}
clean_data |>
  filter(Place %in% repeat_places$Place) |>
  count(Place, Crime, sort = TRUE)
```

```{r}
# Creating a Chi-Squared approximation
table <- table(clean_data$Place, clean_data$Crime)
chisq.test(table)
```

```{r}
top_places <- clean_data |>
  count(Place, sort = TRUE) |>
  slice_head(n = 5) |>
  pull(Place)

top_crimes <- clean_data |>
  count(Crime, sort = TRUE) |>
  slice_head(n = 5) |>
  pull(Crime)

filtered_data <- clean_data |>
  filter(Place %in% top_places, Crime %in% top_crimes)
```

```{r}
table_filtered <- table(filtered_data$Place, filtered_data$Crime)
chisq.test(table_filtered)
```

```{r}
# Heatmap of top 5 locations where crime occurs and top 5 crimes
filtered_data |>
  count(Place, Crime) |>
  ggplot(aes(x = Crime, y = Place, fill = n)) +
  geom_tile(color = "gray") +
  scale_fill_gradient(low = "white", high = "darkgreen") +
  labs(title = "Heatmap of Reported Crime by Place",
       x = "Crime", y = "Place", fill = "Count",
       caption = "Source: Montgomery County Police Department (via DataMontgomery)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# End - Are There Any Patterns of Repeat Crimes in Specific Areas, and How Do They Correlate With Certain Crime Categories?

# Begin - Observing 'All Other Offenses'

```{r}
# Filtering by 'All Other Offenses'

all_other <- data |>
  filter(Crime == "All Other Offenses")
```

```{r}
# Cheaking the unique values that fall under ' All Other Offenses'

unique(all_other$Description)
```

```{r}
all_other |>
  count(Description, sort = TRUE)
```

```{r}
all_other <- data |>
  filter(Crime == "All Other Offenses") |>
  count(Description, sort = TRUE)
```

```{r}
top_descriptions <- all_other |>
  slice_max(n, n = 10) 
```

```{r}
# Creating a visualization of the top 10 crimes under 'All Other Offenses'

ggplot(top_descriptions, aes(x = reorder(Description, n), y = n)) +
  geom_bar(stat = "identity", fill = "#FF6666") +
  coord_flip() +
  labs(title = "Top 10 Descriptions in 'All Other Offenses'",
       x = "Description",
       y = "Number of Reports",
       caption = "Source: Montgomery County Police Department (via DataMontgomery)") +
  theme_minimal()
```

# End - Observing 'All Other Offenses'

# Begin - Creating Data Tables for Agency Crime Report Totals and Comparing by City

```{r}
# Calculate total crime reports per agency, excluding "OTHR" and "P"

agency_totals <- clean_data |> 
  filter(!Agency %in% c("OTHR", "P")) |> 
  group_by(Agency) |> 
  summarise(`Total Crime Reports` = n()) |> 
  arrange(desc(`Total Crime Reports`))
```

```{r}
# Creating the datatable

datatable(agency_totals, 
          colnames = c("Agency", "Total Crime Reports"),
          caption = "Total Crime Reports by Agency")
```

```{r}
# Count total crime reports by city and agency, excluding "OTHR" and "P"

city_agency_counts <- clean_data |>
  filter(!Agency %in% c("OTHR", "P")) |>
  group_by(City, Agency) |>
  summarise(Total_Crimes = n(), .groups = "drop") |>
  arrange(desc(Total_Crimes))
```

```{r}
top_city_agency_table <- city_agency_counts |>
  slice_max(order_by = Total_Crimes, n = 30)
```

```{r}
# Creating a second datatable that includes the city too
datatable(
  top_city_agency_table,
  caption = "Reported Crimes by City and Associated Agency",
  options = list(pageLength = 10, autoWidth = TRUE)
)
```

# End - Creating Data Tables for Agency Crime Report Totals and Comparing by City

# Begin - Observing Year-Over-Year Crime Data

```{r}
yoy_data <- crime_summary |>
  filter(!Agency %in% c("OTHR", "P")) |>
  arrange(Agency, Year) |>
  group_by(Agency) |>
  mutate(YoY_Change = (Crime_Count - lag(Crime_Count)) / lag(Crime_Count) * 100) |>
  ungroup()
```

```{r}
# Creating a visualization that show the year-over-year change in reported crimes by agency

ggplot(
  yoy_data |> filter(!Year %in% c(2016, 2025)),
  aes(x = Year, y = YoY_Change, color = Agency, group = Agency)
) +
  geom_line(linewidth = 1.2) +
  geom_point() +
  labs(
    title = "Year-over-Year Change in Reported Crimes by Agency",
    y = "YoY Change (%)",
    x = "Year",
    color = "Agency",
    caption = "Source: Montgomery County Police Department (via DataMontgomery)"
  ) +
  theme_bw() +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black")
```

# End - Observing Year-Over-Year Crime Data

# Begin - Observing Distribution of Top Crimes by Place

```{r}
# Calculate the percentage of each crime type within each place

heatmap_percent <- filtered_data |>
  count(Place, Crime) |>
  group_by(Place) |>
  mutate(Percent = n / sum(n) * 100)
```

```{r}
# Creating the heatmap of the distribution of top crimes by place

ggplot(heatmap_percent, aes(x = Crime, y = Place, fill = Percent)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(
    title = "Relative Distribution of Top Crimes by Place",
    x = "Crime",
    y = "Place",
    fill = "Percentage (%)"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# End - Observing Distribution of Top Crimes by Place

# Begin - 5-Year Predictions

```{r}
# Filter data for years 2017-2024, exclude "OTHR" and "P" agencies, count crimes by year and agency

# Fill missing values with 0, and arrange by agency and year

agency_year_data <- clean_data |>
  filter(
    Year >= 2017 & Year <= 2024,
    !Agency %in% c("OTHR", "P")
  ) |>
  count(Year, Agency, name = "Crime_Count") |>
  complete(Year, Agency, fill = list(Crime_Count = 0)) |>
  arrange(Agency, Year)

```

```{r}
# Create a linear regression model for each agency's crime count over the years (2017-2024)

# Predict crime counts for 2026-2030 and combine predictions into a single data frame

model1 <- agency_year_data |>
  group_by(Agency) |>
  group_split() |>
  map(~ {
    df <- .
    model1 <- lm(Crime_Count ~ Year, data = df)
    future_years <- data.frame(Year = 2026:2030)
    pred <- predict(model1, newdata = future_years, interval = "confidence")
    tibble(
      Agency = df$Agency[1],
      Year = future_years$Year,
      Predicted = pred[, "fit"],
      Lower = pred[, "lwr"],
      Upper = pred[, "upr"]
    )
  })

future_predictions <- bind_rows(model1)
```

```{r}
# Visualize the prediction

ggplot(future_predictions, aes(x = Year, y = Predicted, color = Agency)) +
  geom_line(linewidth = 0.5) +
  scale_color_manual(values = c(
    "GPD" = "red",
    "MCFM" = "hotpink",
    "MCPD" = "green",
    "MCSO" = "orange",
    "RCPD" = "blue",
    "TPPD" = "purple"
  )) +
  geom_point(
    data = future_predictions |> filter(Agency == "MCPD"),
    size = 2
  ) +
  geom_text(
    data = future_predictions |> filter(Agency == "MCPD"),
    aes(label = round(Predicted)),
    vjust = -0.5, size = 3, color = "black"
  ) +
  labs(
    title = "Predicted Yearly Crime Reports by Agency",
    y = "Predicted Crime Reports",
    x = "Year",
    color = "Agency",
    fill = "Agency"
  ) +
  theme_bw()

```

```{r}
# Filter data for years 2017-2024, exclude "OTHR","P", and 'MCPD' agencies, count crimes by year and agency

# Fill missing values with 0, and arrange by agency and year

agency_year_data_without_MCPD <- clean_data |>
  filter(
    Year >= 2017 & Year <= 2024,
    !Agency %in% c("OTHR", "P", "MCPD")
  ) |>
  count(Year, Agency, name = "Crime_Count") |>
  complete(Year, Agency, fill = list(Crime_Count = 0)) |>
  arrange(Agency, Year)

```

```{r}
# Create a linear regression model for each agency's (except MCPD) crime count over the years (2017-2024)

# Predict crime counts for 2026-2030 and combine predictions into a single data frame

models <- agency_year_data_without_MCPD |>
  group_by(Agency) |>
  group_split() |>
  map(~ {
    df <- .
    model <- lm(Crime_Count ~ Year, data = df)
    future_years <- data.frame(Year = 2026:2030)
    pred <- predict(model, newdata = future_years, interval = "confidence")
    tibble(
      Agency = df$Agency[1],
      Year = future_years$Year,
      Predicted = pred[, "fit"],
      Lower = pred[, "lwr"],
      Upper = pred[, "upr"]
    )
  })

future_predictions <- bind_rows(models)
```

```{r}
# Visualize the prediction

ggplot(future_predictions, aes(x = Year, y = Predicted, color = Agency)) +
  geom_line(linewidth = 0.5) +
  geom_point(size = 2) +
  scale_color_manual(values = c(
    "GPD" = "red",
    "MCFM" = "hotpink",
    "MCSO" = "orange",
    "RCPD" = "blue",
    "TPPD" = "purple"
  )) +
  geom_text(aes(label = round(Predicted)), vjust = -0.5, size = 3, color = "black") +
  labs(
    title = "Predicted Yearly Crime Reports by Agency (Excluding MCPD)",
    y = "Predicted Crime Reports",
    x = "Year",
    color = "Agency",
    fill = "Agency"
  ) +
  theme_bw()


```

# End - 5-Year Predictions

# Begin - Actual Yearly Crime Reports by Agency

```{r}
# Create an interactive scatterplot to show the actual yearly reported crime by agency

plot2 <- ggplot(agency_year_data_without_MCPD, aes(x = Year, y = Crime_Count, color = Agency)) +
  geom_point() +
  geom_line(linewidth = 0.5) +
  scale_color_manual(values = c(
    "GPD" = "red",
    "MCFM" = "hotpink",
    "MCPD" = "green",
    "MCSO" = "orange",
    "RCPD" = "blue",
    "TPPD" = "purple"
  )) +
  labs(
    title = "Total Crime Reports by Agency per Year (Excluding MCPD)",
    x = "Year",
    y = "Reported Crimes",
    color = "Agency"
  ) +
  theme_bw()


ggplotly(plot2)

```

```{r}
# The same scatterplot but it's static

plot2_static <- ggplot(agency_year_data_without_MCPD, aes(x = Year, y = Crime_Count, color = Agency)) +
  geom_point() +
  geom_line(linewidth = 0.5) +
  geom_text(aes(label = Crime_Count), vjust = -0.5, size = 3, color = "black") +
  scale_color_manual(values = c(
    "GPD" = "red",
    "MCFM" = "hotpink",
    "MCSO" = "orange",
    "RCPD" = "blue",
    "TPPD" = "purple"
  )) +
  labs(
    title = "Total Crime Reports by Agency per Year (Excluding MCPD)",
    x = "Year",
    y = "Reported Crimes",
    color = "Agency"
  ) +
  theme_bw()

plot2_static
```

```{r}
top5_places <- clean_data |>
  filter(!is.na(Place)) |>
  count(Place, sort = TRUE) |>
  slice_max(n = 5, order_by = n)
```

```{r}
places_viz <- ggplot(top5_places, aes(x = reorder(Place, n), y = n, fill = Place)) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  labs(
    title = "Top 5 Places with the Most Reported Crimes",
    x = "Place",
    y = "Total Number of Reports"
  ) +
  scale_fill_brewer(palette = "Set1") +
  theme_bw()
places_viz
```

```{r}
normalized_data <- clean_data |>
  filter(Year >= 2017 & Year <= 2024, !Agency %in% c("OTHR", "P")) |>
  count(Year, Agency, name = "Crime_Count") |>
  group_by(Agency) |>
  mutate(
    Crime_Scaled = (Crime_Count - min(Crime_Count)) / (max(Crime_Count) - min(Crime_Count))
  ) |>
  ungroup()

```

```{r}
percent_data <- clean_data |>
  filter(Year >= 2017, Year <= 2024, !Agency %in% c("OTHR", "P", "MCFM", "MCSO")) |>
  count(Year, Agency, name = "Crime_Count") |>
  group_by(Agency) |>
  mutate(Percent = (Crime_Count / sum(Crime_Count)) * 100) |>
  ungroup()

```

```{r}
test_filtered_data <- clean_data |>
  filter(!Year %in% c(2016, 2025))

place_year_data <- filtered_data |>
  count(Place, Year, name = "Crime_Count")

test_top_places <- place_year_data |>
  count(Place, wt = Crime_Count, sort = TRUE) |>
  slice_head(n = 5) |>
  pull(Place)

place_year_data <- place_year_data |>
  filter(Place %in% test_top_places)

forecast_place_lm <- function(df) {
  model <- lm(Crime_Count ~ Year, data = df)
  future_years <- data.frame(Year = 2026:2030)
  preds <- predict(model, newdata = future_years, interval = "confidence")
  tibble(
    Year = future_years$Year,
    Predicted = preds[, "fit"],
    Lower = preds[, "lwr"],
    Upper = preds[, "upr"]
  )
}

place_predictions <- place_year_data |>
  group_by(Place) |>
  arrange(Year) |>
  group_split() |>
  map_dfr(~ {
    place <- unique(.x$Place)
    preds <- forecast_place_lm(.x)
    preds$Place <- place
    preds
  })
```

```{r}
place_predictions_percent <- place_predictions |>
  group_by(Year) |>
  mutate(
    Total = sum(Predicted),
    Percent = Predicted / Total * 100
  ) |>
  ungroup()
```

```{r}
place_predictions_percent |>
  select(Place, Year, Predicted, Percent) |>
  arrange(Year, desc(Predicted)) |>
  print(n = 50)
```

```{r}
ggplot(place_predictions_percent, aes(x = as.factor(Year), y = Percent, fill = Place)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  geom_text(aes(label = paste0(round(Percent, 1), "%")), 
            position = position_dodge(width = 0.8), 
            vjust = -0.3, size = 3, color = "black") +
  labs(
    title = "5-Year Predicted Percentage of Crime Reports by Place",
    x = "Year",
    y = "Predicted Percentage",
    fill = "Place"
  ) +
  theme_bw()

```

```{r}
p3 <- ggplot(place_predictions_percent, aes(
  x = as.factor(Year),
  y = Percent,
  fill = Place,
  text = paste0("Place: ", Place,
                "<br>Year: ", Year,
                "<br>Percent: ", round(Percent, 1), "%"))
) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  labs(
    title = "5-Year Predicted Percentage of Crime Reports by Place",
    x = "Year",
    y = "Predicted Percentage",
    fill = "Place"
  ) +
  theme_bw()

ggplotly(p3, tooltip = "text")

```

```{r}
agency_crime_counts <- clean_data |>
  filter(!Agency %in% c("OTHR", "P"),
         !Year %in% c(2016, 2025)) |>
  group_by(Agency, Year) |>
  summarise(Total_Crimes = n(), .groups = "drop")
```

```{r}
top_places_per_agency_year <- clean_data |>
  filter(!Agency %in% c("OTHR", "P"),
         !Year %in% c(2016, 2025)) |>
  group_by(Agency, Year, Place) |>
  summarise(Place_Crimes = n(), .groups = "drop") |>
  group_by(Agency, Year) |>
  slice_max(order_by = Place_Crimes, n = 1, with_ties = FALSE) |>
  rename(Top_Place = Place)

agency_crime_counts_with_place <- agency_crime_counts |>
  left_join(top_places_per_agency_year, by = c("Agency", "Year"))
```

```{r}
total_crime_plot <- ggplot(agency_crime_counts_with_place, aes(
  x = Year,
  y = Total_Crimes,
  color = Agency,
  group = Agency,  
  text = paste0(
    "Agency: ", Agency,
    "<br>Year: ", Year,
    "<br>Total Crimes: ", Total_Crimes,
    "<br>Top Place: ", Top_Place
  )
)) +
  geom_line(linewidth = 0.5) +
  geom_point(size = 2) +
  labs(
    title = "Total Crime Reports by Agency per Year",
    x = "Year",
    y = "Reported Crimes",
    color = "Agency"
  ) +
  theme_bw()

ggplotly(total_crime_plot, tooltip = "text")
```

```{r}
p_static <- ggplot(agency_crime_counts_with_place, aes(
  x = Year,
  y = Total_Crimes,
  color = Agency,
  group = Agency
)) +
  geom_line(linewidth = 0.5) +
  geom_point(size = 2) +
  scale_color_manual(values = c(
    "GPD" = "red",
    "MCFM" = "hotpink",
    "MCPD" = "green",
    "MCSO" = "orange",
    "RCPD" = "blue",
    "TPPD" = "purple"
  )) +
  geom_text(
    data = agency_crime_counts_with_place |> filter(Agency == "MCPD"),
    aes(label = Total_Crimes),
    vjust = -0.5, size = 3, color = "black"
  ) +
  labs(
    title = "Total Crime Reports by Agency per Year",
    x = "Year",
    y = "Reported Crimes",
    color = "Agency"
  ) +
  theme_bw()

p_static
```

```{r}
datatable(
  future_predictions |> 
    filter(Year >= 2026) |> 
    mutate(across(c(Predicted, Lower, Upper), round)),
  options = list(pageLength = 10),
  caption = "Predicted Crime Reports by Agency (2026–2030)"
)

```

```{r}
ui <- fluidPage(
  titlePanel("Crime Report Dashboard"),

  sidebarLayout(
    sidebarPanel(
      selectInput("agency", "Select Agency:", 
                  choices = c("All", unique(future_predictions$Agency)), 
                  selected = "MCPD"),

      sliderInput("yearRange", "Select Year Range:",
                  min = min(future_predictions$Year),
                  max = max(future_predictions$Year),
                  value = c(2026, 2030),
                  step = 1,
                  sep = "")
      
    ),

    mainPanel(
      tabsetPanel(
        tabPanel("Predicted Crime Plot", plotlyOutput("crimePlot")),
        tabPanel("Predicted Crime Table", dataTableOutput("crimeTable")),
        tabPanel("Total Crimes by Agency", plotlyOutput("totalCrimePlot")),
        tabPanel("Total Crimes (Excl. MCPD)", plotlyOutput("plot2")),
        tabPanel("Agency Totals Table", dataTableOutput("agencyTable")),
        tabPanel("City-Agency Table", dataTableOutput("cityAgencyTable")),
        tabPanel("Place Predictions Plot", plotlyOutput("placePredPlot")),
        tabPanel("Place Predictions Table", dataTableOutput("placePredTable"))
      )
    )
  )
)

server <- function(input, output) {

  filtered_data <- reactive({
    if (input$agency == "All") {
      future_predictions |> 
        filter(Year >= input$yearRange[1],
               Year <= input$yearRange[2])
    } else {
      future_predictions |> 
        filter(Agency == input$agency,
               Year >= input$yearRange[1],
               Year <= input$yearRange[2])
    }
  })

  output$crimePlot <- renderPlotly({
    plot_data <- filtered_data()

    p <- ggplot(plot_data, aes(x = Year, y = Predicted, color = Agency)) +
      geom_line(size = 1.2)+
      geom_point(size = 2) +
      geom_text(aes(label = round(Predicted)), vjust = -0.5, size = 3, color = "black") +
      labs(
        title = if (input$agency == "All") "5-Year Predicted Crime Reports by Agency" else paste("5-Year Predicted Crime Reports for", input$agency),
        y = "Predicted Crime Count",
        x = "Year",
        color = "Agency"
      ) +
      theme_minimal()
    ggplotly(p)
  })

  output$crimeTable <- renderDataTable({
    filtered_data() |> 
      mutate(across(c(Predicted, Lower, Upper), round))
  })

  output$totalCrimePlot <- renderPlotly({
    p <- ggplot(agency_crime_counts_with_place, aes(
      x = Year,
      y = Total_Crimes,
      color = Agency,
      group = Agency,
      text = paste0(
        "Agency: ", Agency,
        "<br>Year: ", Year,
        "<br>Total Crimes: ", Total_Crimes,
        "<br>Top Place: ", Top_Place
      )
    )) +
      geom_line(linewidth = 0.5) +
      geom_point(size = 2) +
      labs(
        title = "Total Crime Reports by Agency per Year",
        x = "Year",
        y = "Reported Crimes",
        color = "Agency"
      ) +
      theme_bw()
    ggplotly(p, tooltip = "text")
  })

  output$plot2 <- renderPlotly({
    p2 <- ggplot(agency_year_data_without_MCPD, aes(x = Year, y = Crime_Count, color = Agency)) +
      geom_point() +
      geom_line(linewidth = 0.5) +
      scale_color_manual(values = c(
        "GPD" = "red",
        "MCFM" = "hotpink",
        "MCPD" = "green",
        "MCSO" = "orange",
        "RCPD" = "blue",
        "TPPD" = "purple"
      )) +
      labs(
        title = "Total Crime Reports by Agency per Year (Excluding MCPD)",
        x = "Year",
        y = "Reported Crimes",
        color = "Agency"
      ) +
      theme_bw()
    ggplotly(p2)
  })

  output$agencyTable <- renderDataTable({
    datatable(agency_totals, 
              colnames = c("Agency", "Total Crime Reports"),
              caption = "Total Crime Reports by Agency")
  })

  output$cityAgencyTable <- renderDataTable({
    datatable(top_city_agency_table,
              caption = "Reported Crimes by City and Associated Agency",
              options = list(pageLength = 10, autoWidth = TRUE))
  })

  output$placePredPlot <- renderPlotly({
    p3 <- ggplot(place_predictions_percent, aes(
  x = as.factor(Year),
  y = Percent,
  fill = Place,
  text = paste0("Place: ", Place,
                "<br>Year: ", Year,
                "<br>Percent: ", round(Percent, 1), "%"))
) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  labs(
    title = "5-Year Predicted Percentage of Crime Reports by Place",
    x = "Year",
    y = "Predicted Percentage",
    fill = "Place"
  ) +
  theme_bw()

ggplotly(p3, tooltip = "text")

  })

  output$placePredTable <- renderDataTable({
    datatable(
      future_predictions |> 
        filter(Year >= 2026) |> 
        mutate(across(c(Predicted, Lower, Upper), round)),
      options = list(pageLength = 10),
      caption = "Predicted Crime Reports by Agency (2026–2030)"
    )
  })
}

shinyApp(ui = ui, server = server)

```
